<?php

namespace Eleanorsoft\DesignersPage\Model\ResourceModel\Designer;

use Eleanorsoft\DesignersPage\Model\Designer;
use Eleanorsoft\DesignersPage\Model\ResourceModel\Designer as ResourceDesigner;
use Magento\Framework\App\Request\Http;
use Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection;
use Magento\Framework\Registry;


/**
 * Class Collection
 *
 * @package Eleanorsoft\DesignersPage\Model\ResourceModel\Designer
 * @author Pisarenko Denis <denis.pisarenko@eleanorsoft.com>
 * @copyright Copyright (c) 2018 Eleanorsoft (https://www.eleanorsoft.com/)
 */

class Collection extends AbstractCollection
{

    protected $_idFieldName = 'designer_id';
    protected $registry;
    protected $request;
    protected $collectionStore;
    public function __construct
    (
        \Magento\Framework\Data\Collection\EntityFactoryInterface $entityFactory,
        \Psr\Log\LoggerInterface $logger,
        \Magento\Framework\Data\Collection\Db\FetchStrategyInterface $fetchStrategy,
        \Magento\Framework\Event\ManagerInterface $eventManager,
        Registry $registry,
        Http $request,
        \Magento\Store\Model\ResourceModel\Store\CollectionFactory $collectionStore,
        \Magento\Framework\DB\Adapter\AdapterInterface $connection = null,
        \Magento\Framework\Model\ResourceModel\Db\AbstractDb $resource = null
    )
    {
        parent::__construct($entityFactory, $logger, $fetchStrategy, $eventManager, $connection, $resource);
        $this->registry = $registry;
        $this->collectionStore = $collectionStore;
        $this->request = $request;
    }

    protected function _construct()
    {
        $this->_init(Designer::class, ResourceDesigner::class);
    }

    protected function _afterLoad()
    {
        $store_id = $this->request->getParam('store');
        $store__front_id = $this->request->getParam('___store');
        if ($store__front_id){
            $stores = $this->collectionStore->create()
                ->addFieldToFilter('code',array("eq" => $store__front_id));
            $stores->getFirstItem();

            $store_id = $stores->getData();
            $store_id = $store_id[0]['store_id'];
        }else {
            if (is_null($store_id)) {
                $store_id = 0;
            }
        }

        // get all ids from collections
        $ids = $this->getAllIds();
        if ($ids) {
            // load translations for ids
            /** @var \Eleanorsoft\DesignersPage\Model\ResourceModel\Designer $resource */
            $resource = $this->_resource;
            $translations = $resource->getTranslationsForIds($ids, $store_id);
            /** @var Designer[] $designers */
            $designers = $this->getItems();
            foreach ($designers as $item) {
                if (isset($translations[$item->getId()])) {
                    $item->setTranslation($translations[$item->getId()]);
                }
            }
            // set translation for every item
        }
        return parent::_afterLoad(); // TODO: Change the autogenerated stub
    }
}